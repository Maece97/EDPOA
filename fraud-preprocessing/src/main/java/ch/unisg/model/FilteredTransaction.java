/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ch.unisg.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FilteredTransaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8287924770546374864L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FilteredTransaction\",\"namespace\":\"ch.unisg.model\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"exchangeRate\",\"type\":\"string\"},{\"name\":\"checkResult\",\"type\":\"string\"},{\"name\":\"cardNumber\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"string\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"merchant\",\"type\":\"string\"},{\"name\":\"merchantCategory\",\"type\":\"string\"},{\"name\":\"tries\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FilteredTransaction> ENCODER =
      new BinaryMessageEncoder<FilteredTransaction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FilteredTransaction> DECODER =
      new BinaryMessageDecoder<FilteredTransaction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<FilteredTransaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<FilteredTransaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FilteredTransaction>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this FilteredTransaction to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a FilteredTransaction from a ByteBuffer. */
  public static FilteredTransaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence timestamp;
  @Deprecated public java.lang.CharSequence status;
  @Deprecated public java.lang.CharSequence exchangeRate;
  @Deprecated public java.lang.CharSequence checkResult;
  @Deprecated public java.lang.CharSequence cardNumber;
  @Deprecated public java.lang.CharSequence amount;
  @Deprecated public java.lang.CharSequence currency;
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public java.lang.CharSequence merchant;
  @Deprecated public java.lang.CharSequence merchantCategory;
  @Deprecated public java.lang.CharSequence tries;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FilteredTransaction() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param timestamp The new value for timestamp
   * @param status The new value for status
   * @param exchangeRate The new value for exchangeRate
   * @param checkResult The new value for checkResult
   * @param cardNumber The new value for cardNumber
   * @param amount The new value for amount
   * @param currency The new value for currency
   * @param country The new value for country
   * @param merchant The new value for merchant
   * @param merchantCategory The new value for merchantCategory
   * @param tries The new value for tries
   */
  public FilteredTransaction(java.lang.CharSequence id, java.lang.CharSequence timestamp, java.lang.CharSequence status, java.lang.CharSequence exchangeRate, java.lang.CharSequence checkResult, java.lang.CharSequence cardNumber, java.lang.CharSequence amount, java.lang.CharSequence currency, java.lang.CharSequence country, java.lang.CharSequence merchant, java.lang.CharSequence merchantCategory, java.lang.CharSequence tries) {
    this.id = id;
    this.timestamp = timestamp;
    this.status = status;
    this.exchangeRate = exchangeRate;
    this.checkResult = checkResult;
    this.cardNumber = cardNumber;
    this.amount = amount;
    this.currency = currency;
    this.country = country;
    this.merchant = merchant;
    this.merchantCategory = merchantCategory;
    this.tries = tries;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return timestamp;
    case 2: return status;
    case 3: return exchangeRate;
    case 4: return checkResult;
    case 5: return cardNumber;
    case 6: return amount;
    case 7: return currency;
    case 8: return country;
    case 9: return merchant;
    case 10: return merchantCategory;
    case 11: return tries;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.lang.CharSequence)value$; break;
    case 2: status = (java.lang.CharSequence)value$; break;
    case 3: exchangeRate = (java.lang.CharSequence)value$; break;
    case 4: checkResult = (java.lang.CharSequence)value$; break;
    case 5: cardNumber = (java.lang.CharSequence)value$; break;
    case 6: amount = (java.lang.CharSequence)value$; break;
    case 7: currency = (java.lang.CharSequence)value$; break;
    case 8: country = (java.lang.CharSequence)value$; break;
    case 9: merchant = (java.lang.CharSequence)value$; break;
    case 10: merchantCategory = (java.lang.CharSequence)value$; break;
    case 11: tries = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'exchangeRate' field.
   * @return The value of the 'exchangeRate' field.
   */
  public java.lang.CharSequence getExchangeRate() {
    return exchangeRate;
  }

  /**
   * Sets the value of the 'exchangeRate' field.
   * @param value the value to set.
   */
  public void setExchangeRate(java.lang.CharSequence value) {
    this.exchangeRate = value;
  }

  /**
   * Gets the value of the 'checkResult' field.
   * @return The value of the 'checkResult' field.
   */
  public java.lang.CharSequence getCheckResult() {
    return checkResult;
  }

  /**
   * Sets the value of the 'checkResult' field.
   * @param value the value to set.
   */
  public void setCheckResult(java.lang.CharSequence value) {
    this.checkResult = value;
  }

  /**
   * Gets the value of the 'cardNumber' field.
   * @return The value of the 'cardNumber' field.
   */
  public java.lang.CharSequence getCardNumber() {
    return cardNumber;
  }

  /**
   * Sets the value of the 'cardNumber' field.
   * @param value the value to set.
   */
  public void setCardNumber(java.lang.CharSequence value) {
    this.cardNumber = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.CharSequence getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.CharSequence value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }

  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'merchant' field.
   * @return The value of the 'merchant' field.
   */
  public java.lang.CharSequence getMerchant() {
    return merchant;
  }

  /**
   * Sets the value of the 'merchant' field.
   * @param value the value to set.
   */
  public void setMerchant(java.lang.CharSequence value) {
    this.merchant = value;
  }

  /**
   * Gets the value of the 'merchantCategory' field.
   * @return The value of the 'merchantCategory' field.
   */
  public java.lang.CharSequence getMerchantCategory() {
    return merchantCategory;
  }

  /**
   * Sets the value of the 'merchantCategory' field.
   * @param value the value to set.
   */
  public void setMerchantCategory(java.lang.CharSequence value) {
    this.merchantCategory = value;
  }

  /**
   * Gets the value of the 'tries' field.
   * @return The value of the 'tries' field.
   */
  public java.lang.CharSequence getTries() {
    return tries;
  }

  /**
   * Sets the value of the 'tries' field.
   * @param value the value to set.
   */
  public void setTries(java.lang.CharSequence value) {
    this.tries = value;
  }

  /**
   * Creates a new FilteredTransaction RecordBuilder.
   * @return A new FilteredTransaction RecordBuilder
   */
  public static ch.unisg.model.FilteredTransaction.Builder newBuilder() {
    return new ch.unisg.model.FilteredTransaction.Builder();
  }

  /**
   * Creates a new FilteredTransaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FilteredTransaction RecordBuilder
   */
  public static ch.unisg.model.FilteredTransaction.Builder newBuilder(ch.unisg.model.FilteredTransaction.Builder other) {
    return new ch.unisg.model.FilteredTransaction.Builder(other);
  }

  /**
   * Creates a new FilteredTransaction RecordBuilder by copying an existing FilteredTransaction instance.
   * @param other The existing instance to copy.
   * @return A new FilteredTransaction RecordBuilder
   */
  public static ch.unisg.model.FilteredTransaction.Builder newBuilder(ch.unisg.model.FilteredTransaction other) {
    return new ch.unisg.model.FilteredTransaction.Builder(other);
  }

  /**
   * RecordBuilder for FilteredTransaction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FilteredTransaction>
    implements org.apache.avro.data.RecordBuilder<FilteredTransaction> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence timestamp;
    private java.lang.CharSequence status;
    private java.lang.CharSequence exchangeRate;
    private java.lang.CharSequence checkResult;
    private java.lang.CharSequence cardNumber;
    private java.lang.CharSequence amount;
    private java.lang.CharSequence currency;
    private java.lang.CharSequence country;
    private java.lang.CharSequence merchant;
    private java.lang.CharSequence merchantCategory;
    private java.lang.CharSequence tries;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ch.unisg.model.FilteredTransaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.exchangeRate)) {
        this.exchangeRate = data().deepCopy(fields()[3].schema(), other.exchangeRate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.checkResult)) {
        this.checkResult = data().deepCopy(fields()[4].schema(), other.checkResult);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cardNumber)) {
        this.cardNumber = data().deepCopy(fields()[5].schema(), other.cardNumber);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.amount)) {
        this.amount = data().deepCopy(fields()[6].schema(), other.amount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.currency)) {
        this.currency = data().deepCopy(fields()[7].schema(), other.currency);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.country)) {
        this.country = data().deepCopy(fields()[8].schema(), other.country);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.merchant)) {
        this.merchant = data().deepCopy(fields()[9].schema(), other.merchant);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.merchantCategory)) {
        this.merchantCategory = data().deepCopy(fields()[10].schema(), other.merchantCategory);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.tries)) {
        this.tries = data().deepCopy(fields()[11].schema(), other.tries);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FilteredTransaction instance
     * @param other The existing instance to copy.
     */
    private Builder(ch.unisg.model.FilteredTransaction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.exchangeRate)) {
        this.exchangeRate = data().deepCopy(fields()[3].schema(), other.exchangeRate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.checkResult)) {
        this.checkResult = data().deepCopy(fields()[4].schema(), other.checkResult);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cardNumber)) {
        this.cardNumber = data().deepCopy(fields()[5].schema(), other.cardNumber);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.amount)) {
        this.amount = data().deepCopy(fields()[6].schema(), other.amount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.currency)) {
        this.currency = data().deepCopy(fields()[7].schema(), other.currency);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.country)) {
        this.country = data().deepCopy(fields()[8].schema(), other.country);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.merchant)) {
        this.merchant = data().deepCopy(fields()[9].schema(), other.merchant);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.merchantCategory)) {
        this.merchantCategory = data().deepCopy(fields()[10].schema(), other.merchantCategory);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.tries)) {
        this.tries = data().deepCopy(fields()[11].schema(), other.tries);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'exchangeRate' field.
      * @return The value.
      */
    public java.lang.CharSequence getExchangeRate() {
      return exchangeRate;
    }

    /**
      * Sets the value of the 'exchangeRate' field.
      * @param value The value of 'exchangeRate'.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder setExchangeRate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.exchangeRate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'exchangeRate' field has been set.
      * @return True if the 'exchangeRate' field has been set, false otherwise.
      */
    public boolean hasExchangeRate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'exchangeRate' field.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder clearExchangeRate() {
      exchangeRate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'checkResult' field.
      * @return The value.
      */
    public java.lang.CharSequence getCheckResult() {
      return checkResult;
    }

    /**
      * Sets the value of the 'checkResult' field.
      * @param value The value of 'checkResult'.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder setCheckResult(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.checkResult = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'checkResult' field has been set.
      * @return True if the 'checkResult' field has been set, false otherwise.
      */
    public boolean hasCheckResult() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'checkResult' field.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder clearCheckResult() {
      checkResult = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'cardNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getCardNumber() {
      return cardNumber;
    }

    /**
      * Sets the value of the 'cardNumber' field.
      * @param value The value of 'cardNumber'.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder setCardNumber(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.cardNumber = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'cardNumber' field has been set.
      * @return True if the 'cardNumber' field has been set, false otherwise.
      */
    public boolean hasCardNumber() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'cardNumber' field.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder clearCardNumber() {
      cardNumber = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.CharSequence getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder setAmount(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.amount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }

    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.currency = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.country = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder clearCountry() {
      country = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'merchant' field.
      * @return The value.
      */
    public java.lang.CharSequence getMerchant() {
      return merchant;
    }

    /**
      * Sets the value of the 'merchant' field.
      * @param value The value of 'merchant'.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder setMerchant(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.merchant = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'merchant' field has been set.
      * @return True if the 'merchant' field has been set, false otherwise.
      */
    public boolean hasMerchant() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'merchant' field.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder clearMerchant() {
      merchant = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'merchantCategory' field.
      * @return The value.
      */
    public java.lang.CharSequence getMerchantCategory() {
      return merchantCategory;
    }

    /**
      * Sets the value of the 'merchantCategory' field.
      * @param value The value of 'merchantCategory'.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder setMerchantCategory(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.merchantCategory = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'merchantCategory' field has been set.
      * @return True if the 'merchantCategory' field has been set, false otherwise.
      */
    public boolean hasMerchantCategory() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'merchantCategory' field.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder clearMerchantCategory() {
      merchantCategory = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'tries' field.
      * @return The value.
      */
    public java.lang.CharSequence getTries() {
      return tries;
    }

    /**
      * Sets the value of the 'tries' field.
      * @param value The value of 'tries'.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder setTries(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.tries = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'tries' field has been set.
      * @return True if the 'tries' field has been set, false otherwise.
      */
    public boolean hasTries() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'tries' field.
      * @return This builder.
      */
    public ch.unisg.model.FilteredTransaction.Builder clearTries() {
      tries = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FilteredTransaction build() {
      try {
        FilteredTransaction record = new FilteredTransaction();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.exchangeRate = fieldSetFlags()[3] ? this.exchangeRate : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.checkResult = fieldSetFlags()[4] ? this.checkResult : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.cardNumber = fieldSetFlags()[5] ? this.cardNumber : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.amount = fieldSetFlags()[6] ? this.amount : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.currency = fieldSetFlags()[7] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.country = fieldSetFlags()[8] ? this.country : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.merchant = fieldSetFlags()[9] ? this.merchant : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.merchantCategory = fieldSetFlags()[10] ? this.merchantCategory : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.tries = fieldSetFlags()[11] ? this.tries : (java.lang.CharSequence) defaultValue(fields()[11]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FilteredTransaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<FilteredTransaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FilteredTransaction>
    READER$ = (org.apache.avro.io.DatumReader<FilteredTransaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
