server:
  port: 8101

spring:
  cloud:
    stream:
      # Define function names which are available to use inside the application
      function:
        definition: transaction;possibleFraudTransaction;fraudulentTransaction
      # Bindings/Mappings for the functions defined above
      bindings:
        # input - <functionName> + -in- + <index>
        # output - <functionName> + -out- + <index>
        # The in and out corresponds to the type of binding (such as input or output). The index is the index of the
        # input or output binding. It is always 0 for typical single input/output function, so it’s only relevant for
        # Functions with multiple input and output arguments.
        # More: https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/spring-cloud-stream.html#_functional_binding_names
        fraudulentTransaction-in-0:
          destination: queue.fraudulentTransaction
          binder: kafka1
        transaction-in-0:
          destination: transaction-fraud-preprocessed
          binder: kafkaAvro
        # transaction-out-0:
        #   destination: queue.transaction
        #   binder: kafka1
        possibleFraudTransaction-out-0:
          destination: queue.possibleFraudTransaction
          binder: kafka1
      # Define available binders & properties which can be used for the bindings above. We can define different broker
      # or also multiple of the same broker
      binders:
        kafka1: # name of the binder can be any string
          type: kafka # binder type (dependency needs to be added inside pom.xml)
          # Configuration of the binder
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: localhost
                      defaultBrokerPort: 29092
                    # set default configuration for all consumer and producer
                    default:
                      # consumer:
                      #   configuration:
                      #     value.deserializer: ch.unisg.model.dto.converters.MessageDeSerializer
                      producer:
                        configuration:
                          value:
                            serializer: ch.unisg.model.dto.converters.MessageSerializer
        kafkaAvro: # name of the binder can be any string
          type: kafka # binder type (dependency needs to be added inside pom.xml)
          # Configuration of the binder
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: localhost
                      defaultBrokerPort: 29092
                    # set default configuration for all consumer and producer
                    default:
                      consumer:
                        configuration:
                          value:
                            deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
                          schema.registry.url: http://localhost:8081
      default:
        # consumer:
        #   use-native-decoding: true # This enables using the custom serializer
        producer:
          useNativeEncoding: true # This enables using the custom serializer
  jackson:
    serialization:
      write-dates-as-timestamps: false
